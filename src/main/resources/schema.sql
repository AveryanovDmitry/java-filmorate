create table IF NOT EXISTS GENRE
(
    genre_id INTEGER auto_increment,
    name     CHARACTER VARYING(20) not null,
    constraint GENRE_PK primary key (genre_id)
);

create table IF NOT EXISTS MPA
(
    mpa_id   INTEGER generated by default as identity (exhausted),
    mpa_name VARCHAR(10) not null,
    constraint MPA_PK primary key (mpa_id)
);

create table IF NOT EXISTS USERS
(
    id       INTEGER auto_increment,
    email    CHARACTER VARYING(50) not null,
    login    CHARACTER VARYING(50) not null,
    name     CHARACTER VARYING(50),
    birthday DATE,
    constraint USERS_PK primary key (id)
);

create unique index if not exists USER_EMAIL_UINDEX on USERS (email);
create unique index if not exists USER_LOGIN_UINDEX on USERS (login);

create table IF NOT EXISTS FRIENDS
(
    first_user_id  INTEGER               not null,
    second_user_id INTEGER               not null,
    constraint first_user_id
        foreign key (first_user_id) references USERS (id),
    constraint second_user_id
        foreign key (second_user_id) references USERS (id),
    constraint FRIENDS_PK PRIMARY KEY (first_user_id, second_user_id)
);

create table IF NOT EXISTS FILMS
(
    id          INTEGER auto_increment,
    name        CHARACTER VARYING(50)  not null,
    mpa_id      INTEGER                not null,
    description CHARACTER VARYING(200) not null,
    releaseDate DATE                   not null,
    duration    INTEGER                not null,
    constraint FILMS_PK primary key (id),
    constraint FILMS_FK foreign key (mpa_id) references MPA (mpa_id)
);

create table IF NOT EXISTS GENRE_FILM
(
    genre_id INTEGER not null,
    film_id  INTEGER not null,
    constraint FILM_TO_GENRE_FILMS_FK foreign key (film_id) references FILMS,
    constraint FILM_TO_GENRE_GENRE_FK foreign key (genre_id) references GENRE (genre_id),
    constraint GENRE_FILM_PK PRIMARY KEY (genre_id, film_id)
);

create table IF NOT EXISTS LIKES
(
    film_id INTEGER not null,
    user_id INTEGER not null,
    constraint LIKES_USERS_ID_FK
        foreign key (user_id) references USERS (id),
    constraint LIKES_FILMS_ID_FK
        foreign key (film_id) references FILMS (id),
    constraint LIKES_PK PRIMARY KEY (user_id, film_id)
);









